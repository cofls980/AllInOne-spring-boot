<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hongik.pcrc.allinone.board.infrastructure.persistance.mysql.repository.BoardMapperRepository">

    <!--  Search  -->
    <select id="searchPosts" resultType="map">
        select distinct *
        from (select distinct t1.board_id, title, content, name, email, b_date, views, count(l.board_id) as likes
            from (select distinct b.board_id, b.title, content, u.name, u.email, b.b_date, count(v.board_id) as views
                from boards as b left join users as u on b.user_id = u.id
                left join views as v on b.board_id = v.board_id group by b.board_id) as t1
            left join likes as l on t1.board_id = l.board_id group by t1.board_id) as t2
        left join (select l.board_id as res from likes as l where l.user_id = #{user_id}) as t3 on t2.board_id = t3.res
        <if test='type == "t"'>
            <foreach collection="list" index="index" item="item">
                <if test="index == 0">
                    where title like CONCAT('%',#{item},'%')
                </if>
                <if test="index != 0">
                    or title like CONCAT('%',#{item},'%')
                </if>
            </foreach>
        </if>
        <if test='type == "w"'>
            <foreach collection="list" index="index" item="item">
                where name like CONCAT('%',#{item},'%')
            </foreach>
        </if>
        <if test='type == "a"'>
            <foreach collection="list" index="index" item="item">
                <if test="index == 0">
                    where title like CONCAT('%',#{item},'%') or name like CONCAT('%',#{item},'%')
                </if>
                <if test="index != 0">
                    or title like CONCAT('%',#{item},'%') or name like CONCAT('%',#{item},'%')
                </if>
            </foreach>
        </if>
        order by b_date desc
    </select>

    <select id="getOnePost" resultType="hashmap">
        select distinct *
        from (select distinct t1.board_id, title, content, name, email, b_date, views, count(l.board_id) as likes
            from (select distinct b.board_id, b.title, content, u.name, u.email, b.b_date, count(v.board_id) as views
                from boards as b left join users as u on b.user_id = u.id
                left join views as v on b.board_id = v.board_id group by b.board_id) as t1
            left join likes as l on t1.board_id = l.board_id group by t1.board_id) as t2
        left join (select l.board_id as res from likes as l where l.user_id = #{user_id}) as t3 on t2.board_id = t3.res
        where t2.board_id = #{board_id}
        order by b_date desc
    </select>

    <!--  Check  -->
    <select id="notExistedPostWithWriter" resultType="boolean">
        select not exists (select * from boards where board_id = #{board_id} and user_id #{user_id}) as success
    </select>

    <select id="notExistedPost" resultType="boolean">
        select not exists (select * from boards where board_id = #{board_id}) as success
    </select>

    <!--  CUD  -->
    <insert id="post" parameterType="board">
        insert into boards(title, content, user_id, b_date) value (#{title}, #{content}, #{user_id}, #{b_date})
    </insert>

    <update id="update" parameterType="board">
        update boards set title = #{title}, content = #{content}, b_date = #{b_date} where boards.board_id = #{board_id}
    </update>

    <delete id="delete" parameterType="Integer">
        delete from boards where board_id = #{board_id}
    </delete>

</mapper>