<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hongik.pcrc.allinone.board.infrastructure.persistance.mysql.repository.BoardMapperRepository">

    <select id="getList" resultType="map">
        select b.board_id, b.title, b.b_writer, b.b_date, count(likes.board_id) as likes, b.views
        from boards as b left outer join likes on b.board_id = likes.board_id
        group by b.board_id
    </select>

    <select id="searchWriter" parameterType="String" resultType="map">
        select b.board_id, b.title, b.b_writer, b.b_date, count(likes.board_id) as likes, b.views
        from boards as b left outer join likes on b.board_id = likes.board_id
        where b.b_writer = #{b_writer}
        group by b.board_id
    </select>

    <select id="searchTitle" parameterType="String" resultType="map">
        select b.board_id, b.title, b.b_writer, b.b_date, count(likes.board_id) as likes, b.views
        from boards as b left outer join likes on b.board_id = likes.board_id
        where b.title like CONCAT('%',#{title},'%')
        group by b.board_id
    </select>

    <select id="searchBothWriterTitle" parameterType="String" resultType="map">
        select b.board_id, b.title, b.b_writer, b.b_date, count(likes.board_id) as likes, b.views
        from boards as b left outer join likes on b.board_id = likes.board_id
        where b.title like CONCAT('%',#{keyword},'%') or b.b_writer = #{keyword}
        group by b.board_id
    </select>

    <select id="getPost" parameterType="Integer" resultType="com.hongik.pcrc.allinone.board.application.service.BoardReadUseCase$FindMapperOneBoardResult">
        select b.board_id, b.title, b.content, b.b_writer, b.b_date, count(likes.board_id) as likes, b.views
        from boards as b left outer join likes on b.board_id = likes.board_id
        where b.board_id = #{board_id}
        group by b.board_id
    </select>

    <insert id="post" parameterType="board">
        insert into boards(title, content, b_writer, writer_email, b_date) value (#{title}, #{content}, #{b_writer}, #{writer_email}, #{b_date})
    </insert>

    <update id="update" parameterType="board">
        update boards set title = #{title}, content = #{content}, b_date = #{b_date} where boards.board_id = #{board_id}
    </update>

    <delete id="delete" parameterType="Integer">
        delete from boards where board_id = #{board_id}
    </delete>
    
    <select id="isUserLikes" parameterType="map" resultType="Integer">
        select count(*) from likes where likes.user_id = #{user_id} and likes.board_id = #{board_id}
    </select>

    <insert id="createLikes" parameterType="map">
        insert into likes(board_id, user_id) value (#{board_id}, #{user_id})
    </insert>

    <delete id="deleteLikes" parameterType="map">
        delete from likes where board_id = #{board_id} and user_id = #{user_id}
    </delete>

    <select id="checkView" parameterType="map" resultType="views">
        select * from views where views.board_id = #{board_id} and views.user_id = #{user_id}
    </select>

    <insert id="createView" parameterType="map">
        insert into views(board_id, user_id) value (#{board_id}, #{user_id})
    </insert>

    <update id="updateView" parameterType="Integer">
        update boards set boards.views = boards.views + 1 where boards.board_id = #{board_id}
    </update>

</mapper>